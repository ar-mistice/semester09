#  This file is part of traffic lights model development and verification.
#
#  Copyright (C) 2010  Vladimir Rutsky <altsysrq@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os.path
import itertools

Import("env")

sources = Glob("*.pml", strings=True)

automata_source_node = env.Command("pan.c", sources, "spin -a -v main.pml", chdir=True)
Clean(automata_source_node, ["pan.b", "pan.m", "pan.h", "pan.t", "pan.tmp"])

verify_basic_safety = env.Command("verify_basic_safety", sources,
    "spin -a -v main.pml && "
    "gcc -w -o pan -D_POSIX_SOURCE -DMEMLIM=2048 -DSAFETY -DNOCLAIM -DXUSAFE -DNOFAIR pan.c && "
    "echo '====================' && "
    "echo '  Verifying safety  ' && "
    "echo '====================' && "
    "time -v ./pan -v -m2000000 -w19 -c1 -b -v && "
    "echo === DONE ===", chdir=True)
Clean(verify_basic_safety, ["pan.b", "pan.m", "pan.h", "pan.t", "pan.tmp", "pan"])

verify_liveness_progress = env.Command("verify_liveness_progress", automata_source_node,
    "gcc -w -o pan -D_POSIX_SOURCE -DMEMLIM=2048 -DNP -DNOCLAIM -DXUSAFE -DNOFAIR pan.c && "
    "echo '================================' && "
    "echo '  Verifying liveness/progresss  ' && "
    "echo '================================' && "
    "time -v ./pan -v -m2000000 -w19  -l -c1 && "
    "echo === DONE ===", chdir=True)
Clean(verify_liveness_progress, ["pan"])

safety_claims = {
    'safety_01': '[] (!accident_01)',
    'safety_02': '[] (!accident_02)',
    'safety_03': '[] (!accident_03)',
    'safety_13': '[] (!accident_13)',
    'safety_23': '[] (!accident_23)',
    }

safety_verify_cmds = []
for claim_name, claim in safety_claims.iteritems():
    claim_gen_cmd = env.Command("{0}.ltl".format(claim_name), [],
        "spin -f '! ({0})' > {1}.ltl".format(claim, claim_name),
        chdir=True)
    
    verify_cmd = env.Command("verify_{0}".format(claim_name), claim_gen_cmd,
        "spin -a -N {0}.ltl -v main.pml && "
        "gcc -w -o pan -D_POSIX_SOURCE -DMEMLIM=2048 -DXUSAFE -DNOFAIR pan.c && "
        "echo '========================' && "
        "echo '  Verifying {0}         ' && "
        "echo '========================' && "
        "time -v ./pan -v -m2000000 -w19 -a -c1 && "
        "echo === DONE ===".format(claim_name), chdir=True)
    Clean(verify_cmd, ["pan"])
    
    safety_verify_cmds.append(verify_cmd)

verify_safety_all = env.Command("verify_safety_all", safety_verify_cmds,
    "", chdir=True)

#safety_01 = env.Command("safety_01.ltl", [],
#    "spin -f '! ([] (!accident_01))' > safety_01.ltl",
#    chdir=True)
#
#verify_safety_01 = env.Command("verify_safety_01", safety_01,
#    "spin -a -N safety_01.ltl -v main.pml && "
#    "gcc -w -o pan -D_POSIX_SOURCE -DMEMLIM=2048 -DXUSAFE -DNOFAIR pan.c && "
#    "echo && "
#    "time -v ./pan -v -m2000000 -w19 -a -c1", chdir=True)
#Clean(verify_safety_01, ["pan"])

liveness_claims = {
    'liveness_0': '[] (car_waiting_0 -> <> tl_green_0)',
    'liveness_1': '[] (car_waiting_1 -> <> tl_green_1)',
    'liveness_2': '[] (car_waiting_2 -> <> tl_green_2)',
    'liveness_3': '[] (car_waiting_3 -> <> tl_green_3)',
    }

liveness_verify_cmds = []
for claim_name, claim in safety_claims.iteritems():
    claim_gen_cmd = env.Command("{0}.ltl".format(claim_name), [],
        "spin -f '! ({0})' > {1}.ltl".format(claim, claim_name),
        chdir=True)
    
    verify_cmd = env.Command("verify_{0}".format(claim_name), claim_gen_cmd,
        "spin -a -N {0}.ltl -v main.pml && "
        "gcc -w -o pan -D_POSIX_SOURCE -DMEMLIM=2048 -DNOREDUCE -DNFAIR=5 pan.c && "
        "echo '========================' && "
        "echo '  Verifying {0}         ' && "
        "echo '========================' && "
        "time -v ./pan -v -m2000000 -w19 -a -f -n -c1 && "
        "echo === DONE ===".format(claim_name), chdir=True)
    Clean(verify_cmd, ["pan"])
    
    liveness_verify_cmds.append(verify_cmd)

verify_liveness_all = env.Command("verify_liveness_all", liveness_verify_cmds,
        "", chdir=True)
        
verify_all = env.Command("verify_all", 
    [verify_basic_safety, verify_liveness_progress, verify_safety_all, verify_liveness_all],
    "", chdir=True)

#liveness_0 = env.Command("liveness_0.ltl", [],
#    "spin -f '! ([] (car_waiting_0 -> <> tl_green_0))' > liveness_0.ltl",
#    chdir=True)
#
#verify_liveness_0 = env.Command("verify_liveness_0", liveness_0,
#    "spin -a -N liveness_0.ltl -v main.pml && "
#    "gcc -w -o pan -D_POSIX_SOURCE -DMEMLIM=2048 -DNOREDUCE -DNFAIR=5 pan.c && "
#    "echo && "
#    "time -v ./pan -v -m1000000 -w19 -a -f -n -c1", chdir=True)
#Clean(verify_liveness_0, ["pan"])

Default(automata_source_node)

print "BUILD_TARGETS is", map(str, BUILD_TARGETS)
